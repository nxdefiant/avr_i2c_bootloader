   1               		.file	"uart.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  92               	.global	__vector_11
  94               	__vector_11:
   1:uart.c        **** #include <avr/io.h>
   2:uart.c        **** #include <stdlib.h>
   3:uart.c        **** #include "uart.h"
   4:uart.c        **** #include <avr/interrupt.h>
   5:uart.c        **** 
   6:uart.c        **** #define UART_UBRR_CALC(BAUD_,FREQ_) ((FREQ_)/((BAUD_)*16L)-1)
   7:uart.c        **** 
   8:uart.c        **** static volatile	char read[RINGBUFFER_LEN];
   9:uart.c        **** static volatile	char *in_read_ptr;
  10:uart.c        **** static volatile	char *out_read_ptr;
  11:uart.c        **** 
  12:uart.c        **** ISR(USART_RXC_vect) {
  96               	.LM0:
  97               	.LFBB1:
  98 0000 1F92      		push r1
  99 0002 0F92      		push r0
 100 0004 0FB6      		in r0,__SREG__
 101 0006 0F92      		push r0
 102 0008 1124      		clr __zero_reg__
 103 000a 8F93      		push r24
 104 000c 9F93      		push r25
 105 000e EF93      		push r30
 106 0010 FF93      		push r31
 107               	/* prologue: Signal */
 108               	/* frame size = 0 */
 109               	/* stack size = 7 */
 110               	.L__stack_usage = 7
  13:uart.c        **** 	// update read from uart
  14:uart.c        **** 	if (UCSRA & (1<<RXC)) {
 112               	.LM1:
 113 0012 5F9B      		sbis 0xb,7
 114 0014 00C0      		rjmp .L1
  15:uart.c        **** 		*in_read_ptr = UDR;
 116               	.LM2:
 117 0016 E091 0000 		lds r30,in_read_ptr
 118 001a F091 0000 		lds r31,in_read_ptr+1
 119 001e 8CB1      		in r24,0xc
 120 0020 8083      		st Z,r24
  16:uart.c        **** 
  17:uart.c        **** 		if (in_read_ptr < read + RINGBUFFER_LEN - 1) in_read_ptr++;
 122               	.LM3:
 123 0022 80E0      		ldi r24,hi8(read+99)
 124 0024 E030      		cpi r30,lo8(read+99)
 125 0026 F807      		cpc r31,r24
 126 0028 00F4      		brsh .L3
 128               	.LM4:
 129 002a 3196      		adiw r30,1
 130 002c F093 0000 		sts in_read_ptr+1,r31
 131 0030 E093 0000 		sts in_read_ptr,r30
 132 0034 00C0      		rjmp .L1
 133               	.L3:
  18:uart.c        **** 		else in_read_ptr = (char *)read;
 135               	.LM5:
 136 0036 80E0      		ldi r24,lo8(read)
 137 0038 90E0      		ldi r25,hi8(read)
 138 003a 9093 0000 		sts in_read_ptr+1,r25
 139 003e 8093 0000 		sts in_read_ptr,r24
 140               	.L1:
 141               	/* epilogue start */
  19:uart.c        **** 	}
  20:uart.c        **** }
 143               	.LM6:
 144 0042 FF91      		pop r31
 145 0044 EF91      		pop r30
 146 0046 9F91      		pop r25
 147 0048 8F91      		pop r24
 148 004a 0F90      		pop r0
 149 004c 0FBE      		out __SREG__,r0
 150 004e 0F90      		pop r0
 151 0050 1F90      		pop r1
 152 0052 1895      		reti
 154               	.Lscope1:
 157               	.global	setup_uart
 159               	setup_uart:
  21:uart.c        **** 
  22:uart.c        **** 
  23:uart.c        **** void setup_uart(unsigned int rate) {
 161               	.LM7:
 162               	.LFBB2:
 163               	/* prologue: function */
 164               	/* frame size = 0 */
 165               	/* stack size = 0 */
 166               	.L__stack_usage = 0
 167 0054 9C01      		movw r18,r24
  24:uart.c        **** 	UCSRB |= (1<<TXEN) | (1<<RXEN); // UART TX & RX
 169               	.LM8:
 170 0056 8AB1      		in r24,0xa
 171 0058 8861      		ori r24,lo8(24)
 172 005a 8AB9      		out 0xa,r24
  25:uart.c        **** 	UCSRB |= (1<<RXCIE); 		// RX Interrupt
 174               	.LM9:
 175 005c 579A      		sbi 0xa,7
  26:uart.c        **** 	UCSRC |= (1<<URSEL) | (3<<UCSZ0); // Asynchron 8N1
 177               	.LM10:
 178 005e 80B5      		in r24,0x20
 179 0060 8668      		ori r24,lo8(-122)
 180 0062 80BD      		out 0x20,r24
  27:uart.c        **** 
  28:uart.c        **** 	UBRRH = (uint8_t)(UART_UBRR_CALC(rate, F_CPU) >> 8);
 182               	.LM11:
 183 0064 40E0      		ldi r20,0
 184 0066 50E0      		ldi r21,0
 185 0068 84E0      		ldi r24,4
 186               		1:
 187 006a 220F      		lsl r18
 188 006c 331F      		rol r19
 189 006e 441F      		rol r20
 190 0070 551F      		rol r21
 191 0072 8A95      		dec r24
 192 0074 01F4      		brne 1b
 193 0076 60E0      		ldi r22,0
 194 0078 79E0      		ldi r23,lo8(9)
 195 007a 8DE3      		ldi r24,lo8(61)
 196 007c 90E0      		ldi r25,0
 197 007e 00D0      		rcall __divmodsi4
 198 0080 DA01      		movw r26,r20
 199 0082 C901      		movw r24,r18
 200 0084 0197      		sbiw r24,1
 201 0086 A109      		sbc r26,__zero_reg__
 202 0088 B109      		sbc r27,__zero_reg__
 203 008a 892F      		mov r24,r25
 204 008c 9A2F      		mov r25,r26
 205 008e AB2F      		mov r26,r27
 206 0090 BB27      		clr r27
 207 0092 A7FD      		sbrc r26,7
 208 0094 BA95      		dec r27
 209 0096 80BD      		out 0x20,r24
  29:uart.c        **** 	UBRRL = (uint8_t)UART_UBRR_CALC(rate, F_CPU);
 211               	.LM12:
 212 0098 2150      		subi r18,lo8(-(-1))
 213 009a 29B9      		out 0x9,r18
  30:uart.c        **** 
  31:uart.c        **** 	in_read_ptr = out_read_ptr = read;
 215               	.LM13:
 216 009c 80E0      		ldi r24,lo8(read)
 217 009e 90E0      		ldi r25,hi8(read)
 218 00a0 9093 0000 		sts out_read_ptr+1,r25
 219 00a4 8093 0000 		sts out_read_ptr,r24
 220 00a8 9093 0000 		sts in_read_ptr+1,r25
 221 00ac 8093 0000 		sts in_read_ptr,r24
 222 00b0 0895      		ret
 224               	.Lscope2:
 227               	.global	uart_putc
 229               	uart_putc:
  32:uart.c        **** }
  33:uart.c        **** 
  34:uart.c        **** 
  35:uart.c        **** void uart_putc(char *c) {
 231               	.LM14:
 232               	.LFBB3:
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 0 */
 236               	.L__stack_usage = 0
 237               	.L6:
  36:uart.c        **** 	while (!(UCSRA & (1<<UDRE)));
 239               	.LM15:
 240 00b2 5D9B      		sbis 0xb,5
 241 00b4 00C0      		rjmp .L6
  37:uart.c        **** 	UDR = *c;
 243               	.LM16:
 244 00b6 FC01      		movw r30,r24
 245 00b8 8081      		ld r24,Z
 246 00ba 8CB9      		out 0xc,r24
 247 00bc 0895      		ret
 249               	.Lscope3:
 253               	.global	uart_putchar
 255               	uart_putchar:
  38:uart.c        **** }
  39:uart.c        **** 
  40:uart.c        **** 
  41:uart.c        **** int uart_putchar(char c, FILE *stream)
  42:uart.c        **** {
 257               	.LM17:
 258               	.LFBB4:
 259 00be A1E0      		ldi r26,lo8(1)
 260 00c0 B0E0      		ldi r27,0
 261 00c2 E0E0      		ldi r30,lo8(gs(1f))
 262 00c4 F0E0      		ldi r31,hi8(gs(1f))
 263 00c6 00C0      		rjmp __prologue_saves__+((18 - 2) * 2)
 264               	1:
 265               	/* prologue: function */
 266               	/* frame size = 1 */
 267               	/* stack size = 3 */
 268               	.L__stack_usage = 3
 269 00c8 8983      		std Y+1,r24
  43:uart.c        **** 	uart_putc(&c);
 271               	.LM18:
 272 00ca CE01      		movw r24,r28
 273 00cc 0196      		adiw r24,1
 274 00ce 00D0      		rcall uart_putc
  44:uart.c        **** 	return 0;
  45:uart.c        **** }
 276               	.LM19:
 277 00d0 80E0      		ldi r24,0
 278 00d2 90E0      		ldi r25,0
 279               	/* epilogue start */
 280 00d4 2196      		adiw r28,1
 281 00d6 E2E0      		ldi r30, lo8(2)
 282 00d8 00C0      		rjmp __epilogue_restores__ + ((18 - 2) * 2)
 284               	.Lscope4:
 286               	.global	uart_puts
 288               	uart_puts:
  46:uart.c        **** 
  47:uart.c        **** 
  48:uart.c        **** void uart_puts(char *s) {
 290               	.LM20:
 291               	.LFBB5:
 292 00da CF93      		push r28
 293 00dc DF93      		push r29
 294               	/* prologue: function */
 295               	/* frame size = 0 */
 296               	/* stack size = 2 */
 297               	.L__stack_usage = 2
 298 00de EC01      		movw r28,r24
  49:uart.c        **** 	char *c;
  50:uart.c        **** 
  51:uart.c        **** 	for (c = s; *c != '\0'; c++)
 300               	.LM21:
 301 00e0 00C0      		rjmp .L13
 302               	.L14:
  52:uart.c        **** 		uart_putc(c);
 304               	.LM22:
 305 00e2 00D0      		rcall uart_putc
 306               	.L13:
 307 00e4 CE01      		movw r24,r28
 308 00e6 2196      		adiw r28,1
  51:uart.c        **** 	for (c = s; *c != '\0'; c++)
 310               	.LM23:
 311 00e8 FC01      		movw r30,r24
 312 00ea 2081      		ld r18,Z
 313 00ec 2111      		cpse r18,__zero_reg__
 314 00ee 00C0      		rjmp .L14
 315               	/* epilogue start */
  53:uart.c        **** }
 317               	.LM24:
 318 00f0 DF91      		pop r29
 319 00f2 CF91      		pop r28
 320 00f4 0895      		ret
 325               	.Lscope5:
 327               	.global	uart_getc
 329               	uart_getc:
  54:uart.c        **** 
  55:uart.c        **** 
  56:uart.c        **** int uart_getchar(FILE *stream)
  57:uart.c        **** {
  58:uart.c        **** 	return uart_getc();
  59:uart.c        **** }
  60:uart.c        **** 
  61:uart.c        **** 
  62:uart.c        **** int uart_getc() {
 331               	.LM25:
 332               	.LFBB6:
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335               	/* stack size = 0 */
 336               	.L__stack_usage = 0
 337               	.L16:
  63:uart.c        **** 	while (!(UCSRA & (1<<RXC)));
 339               	.LM26:
 340 00f6 5F9B      		sbis 0xb,7
 341 00f8 00C0      		rjmp .L16
  64:uart.c        **** 	return UDR;
 343               	.LM27:
 344 00fa 8CB1      		in r24,0xc
  65:uart.c        **** }
 346               	.LM28:
 347 00fc 90E0      		ldi r25,0
 348 00fe 0895      		ret
 350               	.Lscope6:
 353               	.global	uart_getchar
 355               	uart_getchar:
  57:uart.c        **** {
 357               	.LM29:
 358               	.LFBB7:
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 0 */
 362               	.L__stack_usage = 0
  58:uart.c        **** 	return uart_getc();
 364               	.LM30:
 365 0100 00D0      		rcall uart_getc
  59:uart.c        **** }
 367               	.LM31:
 368 0102 0895      		ret
 370               	.Lscope7:
 372               	.global	uart_setup_stdout
 374               	uart_setup_stdout:
  66:uart.c        **** 
  67:uart.c        **** 
  68:uart.c        **** void uart_setup_stdout() {
 376               	.LM32:
 377               	.LFBB8:
 378               	/* prologue: function */
 379               	/* frame size = 0 */
 380               	/* stack size = 0 */
 381               	.L__stack_usage = 0
  69:uart.c        **** 	fdevopen(uart_putchar, uart_getchar);
 383               	.LM33:
 384 0104 60E0      		ldi r22,lo8(gs(uart_getchar))
 385 0106 70E0      		ldi r23,hi8(gs(uart_getchar))
 386 0108 80E0      		ldi r24,lo8(gs(uart_putchar))
 387 010a 90E0      		ldi r25,hi8(gs(uart_putchar))
 388 010c 00D0      		rcall fdevopen
 389 010e 0895      		ret
 391               	.Lscope8:
 394               	.global	uart_stream_update
 396               	uart_stream_update:
  70:uart.c        **** }
  71:uart.c        **** 
  72:uart.c        **** 
  73:uart.c        **** void uart_stream_update(ringbuffer_t *buffer) {
 398               	.LM34:
 399               	.LFBB9:
 400 0110 CF93      		push r28
 401 0112 DF93      		push r29
 402               	/* prologue: function */
 403               	/* frame size = 0 */
 404               	/* stack size = 2 */
 405               	.L__stack_usage = 2
  74:uart.c        **** 	// update write to uart
  75:uart.c        **** 	if (buffer->out_write_ptr != buffer->in_write_ptr) {
 407               	.LM35:
 408 0114 FC01      		movw r30,r24
 409 0116 E253      		subi r30,50
 410 0118 FF4F      		sbci r31,-1
 411 011a A081      		ld r26,Z
 412 011c B181      		ldd r27,Z+1
 413 011e EC01      		movw r28,r24
 414 0120 C453      		subi r28,52
 415 0122 DF4F      		sbci r29,-1
 416 0124 2881      		ld r18,Y
 417 0126 3981      		ldd r19,Y+1
 418 0128 A217      		cp r26,r18
 419 012a B307      		cpc r27,r19
 420 012c 01F0      		breq .L21
  76:uart.c        **** 		if (UCSRA & (1<<UDRE)) {
 422               	.LM36:
 423 012e 5D9B      		sbis 0xb,5
 424 0130 00C0      		rjmp .L21
  77:uart.c        **** 			UDR = *buffer->out_write_ptr;
 426               	.LM37:
 427 0132 2C91      		ld r18,X
 428 0134 2CB9      		out 0xc,r18
  78:uart.c        **** 			if (buffer->out_write_ptr < buffer->write + RINGBUFFER_LEN - 1) buffer->out_write_ptr++;
 430               	.LM38:
 431 0136 2081      		ld r18,Z
 432 0138 3181      		ldd r19,Z+1
 433 013a AC01      		movw r20,r24
 434 013c 4553      		subi r20,53
 435 013e 5F4F      		sbci r21,-1
 436 0140 2417      		cp r18,r20
 437 0142 3507      		cpc r19,r21
 438 0144 00F4      		brsh .L22
 440               	.LM39:
 441 0146 2F5F      		subi r18,-1
 442 0148 3F4F      		sbci r19,-1
 443 014a 00C0      		rjmp .L31
 444               	.L22:
  79:uart.c        **** 			else buffer->out_write_ptr = buffer->write;
 446               	.LM40:
 447 014c 9C01      		movw r18,r24
 448 014e 2859      		subi r18,-104
 449 0150 3F4F      		sbci r19,-1
 450               	.L31:
 451 0152 3183      		std Z+1,r19
 452 0154 2083      		st Z,r18
 453               	.L21:
  80:uart.c        **** 		}
  81:uart.c        **** 	}
  82:uart.c        **** 
  83:uart.c        **** 	// update read from uart	
  84:uart.c        **** 	if (in_read_ptr != out_read_ptr) {
 455               	.LM41:
 456 0156 E091 0000 		lds r30,out_read_ptr
 457 015a F091 0000 		lds r31,out_read_ptr+1
 458 015e 2091 0000 		lds r18,in_read_ptr
 459 0162 3091 0000 		lds r19,in_read_ptr+1
 460 0166 2E17      		cp r18,r30
 461 0168 3F07      		cpc r19,r31
 462 016a 01F0      		breq .L20
  85:uart.c        **** 		*buffer->in_read_ptr = *out_read_ptr;
 464               	.LM42:
 465 016c DC01      		movw r26,r24
 466 016e AC59      		subi r26,-100
 467 0170 BF4F      		sbci r27,-1
 468 0172 CD91      		ld r28,X+
 469 0174 DC91      		ld r29,X
 470 0176 1197      		sbiw r26,1
 471 0178 2081      		ld r18,Z
 472 017a 2883      		st Y,r18
  86:uart.c        **** 
  87:uart.c        **** 		// update newline chars
  88:uart.c        **** 		if (buffer->block_read == *buffer->in_read_ptr) buffer->newlines++;
 474               	.LM43:
 475 017c 6D91      		ld r22,X+
 476 017e 7C91      		ld r23,X
 477 0180 1197      		sbiw r26,1
 478 0182 9C01      		movw r18,r24
 479 0184 2B52      		subi r18,43
 480 0186 3F4F      		sbci r19,-1
 481 0188 E901      		movw r28,r18
 482 018a 3881      		ld r19,Y
 483 018c EB01      		movw r28,r22
 484 018e 2881      		ld r18,Y
 485 0190 3213      		cpse r19,r18
 486 0192 00C0      		rjmp .L24
 488               	.LM44:
 489 0194 9C01      		movw r18,r24
 490 0196 2C52      		subi r18,44
 491 0198 3F4F      		sbci r19,-1
 492 019a E901      		movw r28,r18
 493 019c 4881      		ld r20,Y
 494 019e 4F5F      		subi r20,lo8(-(1))
 495 01a0 4883      		st Y,r20
 496               	.L24:
  89:uart.c        **** 
  90:uart.c        **** 		if (buffer->in_read_ptr < buffer->read + RINGBUFFER_LEN - 1) buffer->in_read_ptr++;
 498               	.LM45:
 499 01a2 9C01      		movw r18,r24
 500 01a4 2D59      		subi r18,-99
 501 01a6 3F4F      		sbci r19,-1
 502 01a8 6217      		cp r22,r18
 503 01aa 7307      		cpc r23,r19
 504 01ac 00F4      		brsh .L25
 506               	.LM46:
 507 01ae EB01      		movw r28,r22
 508 01b0 2196      		adiw r28,1
 509 01b2 CD93      		st X+,r28
 510 01b4 DC93      		st X,r29
 511 01b6 00C0      		rjmp .L26
 512               	.L25:
  91:uart.c        **** 		else buffer->in_read_ptr = buffer->read;
 514               	.LM47:
 515 01b8 8D93      		st X+,r24
 516 01ba 9C93      		st X,r25
 517               	.L26:
  92:uart.c        **** 
  93:uart.c        **** 		// move pointer
  94:uart.c        **** 		if (out_read_ptr < read + RINGBUFFER_LEN - 1) out_read_ptr++;
 519               	.LM48:
 520 01bc D0E0      		ldi r29,hi8(read+99)
 521 01be E030      		cpi r30,lo8(read+99)
 522 01c0 FD07      		cpc r31,r29
 523 01c2 00F4      		brsh .L27
 525               	.LM49:
 526 01c4 3196      		adiw r30,1
 527 01c6 F093 0000 		sts out_read_ptr+1,r31
 528 01ca E093 0000 		sts out_read_ptr,r30
 529 01ce 00C0      		rjmp .L20
 530               	.L27:
  95:uart.c        **** 		else out_read_ptr = read;
 532               	.LM50:
 533 01d0 80E0      		ldi r24,lo8(read)
 534 01d2 90E0      		ldi r25,hi8(read)
 535 01d4 9093 0000 		sts out_read_ptr+1,r25
 536 01d8 8093 0000 		sts out_read_ptr,r24
 537               	.L20:
 538               	/* epilogue start */
  96:uart.c        **** 	}
  97:uart.c        **** }
 540               	.LM51:
 541 01dc DF91      		pop r29
 542 01de CF91      		pop r28
 543 01e0 0895      		ret
 545               	.Lscope9:
 546               		.local	read
 547               		.comm	read,100,1
 548               		.comm	num_ringbuffers,1,1
 549               		.comm	ringbuffers,2,1
 550               		.local	in_read_ptr
 551               		.comm	in_read_ptr,2,1
 552               		.local	out_read_ptr
 553               		.comm	out_read_ptr,2,1
 560               	.Letext0:
 561               		.ident	"GCC: (GNU) 4.7.0"
 562               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart.c
     /tmp/cc88tIob.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc88tIob.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc88tIob.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc88tIob.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc88tIob.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc88tIob.s:94     .text:0000000000000000 __vector_11
     /tmp/cc88tIob.s:547    .bss:0000000000000064 in_read_ptr
                             .bss:0000000000000000 read
     /tmp/cc88tIob.s:159    .text:0000000000000054 setup_uart
     /tmp/cc88tIob.s:551    .bss:0000000000000066 out_read_ptr
     /tmp/cc88tIob.s:229    .text:00000000000000b2 uart_putc
     /tmp/cc88tIob.s:255    .text:00000000000000be uart_putchar
     /tmp/cc88tIob.s:288    .text:00000000000000da uart_puts
     /tmp/cc88tIob.s:329    .text:00000000000000f6 uart_getc
     /tmp/cc88tIob.s:355    .text:0000000000000100 uart_getchar
     /tmp/cc88tIob.s:374    .text:0000000000000104 uart_setup_stdout
     /tmp/cc88tIob.s:396    .text:0000000000000110 uart_stream_update
                            *COM*:0000000000000001 num_ringbuffers
                            *COM*:0000000000000002 ringbuffers

UNDEFINED SYMBOLS
__divmodsi4
__prologue_saves__
__epilogue_restores__
fdevopen
__do_clear_bss
